"""
Trading Strategy - Expert System powered by Experta
Single, powerful rule-based strategy for all market conditions
"""

import pandas as pd
from typing import Dict
from experta import *


# ==================== FACTS ====================

class MarketCondition(Fact):
    """Facts about current market conditions"""
    pass


class Indicator(Fact):
    """Individual indicator readings"""
    pass


class Signal(Fact):
    """Trading signals generated by rules"""
    pass


# ==================== EXPERT SYSTEM ====================

class TradingExpert(KnowledgeEngine):
    """Expert System for trading decisions using rule-based inference"""
    
    def __init__(self):
        super().__init__()
        self.signals = []
        self.triggered_rules = []
        
    # ==================== UTILITY METHODS ====================
    
    def add_signal(self, signal_type: str, strength: int, reason: str):
        """Add a trading signal with strength and reason"""
        self.signals.append({
            'type': signal_type,
            'strength': strength,
            'reason': reason
        })
        
    def add_rule_trigger(self, rule_name: str):
        """Track which rules were triggered"""
        self.triggered_rules.append(rule_name)
    
    # ==================== MARKET REGIME RULES ====================
    
    @Rule(
        Indicator(name='adx', value=P(lambda x: x > 25)),
        Indicator(name='atr_pct', value=P(lambda x: x < 2.5)),
        Indicator(name='ema_aligned', value=True)
    )
    def strong_trending_market(self):
        """Detect strong trending market: High ADX + Low volatility + EMA alignment"""
        self.declare(MarketCondition(regime='STRONG_TREND'))
        self.add_rule_trigger('Strong Trending Market')
    
    @Rule(
        Indicator(name='adx', value=P(lambda x: x < 20)),
        Indicator(name='bb_squeeze', value=True)
    )
    def ranging_market(self):
        """Detect ranging market: Low ADX + Bollinger Squeeze"""
        self.declare(MarketCondition(regime='RANGING'))
        self.add_rule_trigger('Ranging Market')
    
    @Rule(
        Indicator(name='atr_pct', value=P(lambda x: x > 3.0)),
        Indicator(name='adx', value=P(lambda x: x > 30))
    )
    def volatile_trending_market(self):
        """Detect volatile trending market: High ATR + Very high ADX"""
        self.declare(MarketCondition(regime='VOLATILE_TREND'))
        self.add_rule_trigger('Volatile Trending Market')
    
    # ==================== BULLISH TREND RULES ====================
    
    @Rule(
        MarketCondition(regime='STRONG_TREND'),
        Indicator(name='ema_9_above_21', value=True),
        Indicator(name='ema_21_above_50', value=True),
        Indicator(name='dmp_above_dmn', value=True),
        Indicator(name='supertrend', value='BULLISH'),
        salience=100  # High priority
    )
    def perfect_uptrend_setup(self):
        """Perfect uptrend: All trend indicators aligned"""
        self.add_signal('BUY', 40, 'Perfect uptrend: ADX+EMA+DMP+Supertrend')
        self.add_rule_trigger('Perfect Uptrend')
    
    @Rule(
        MarketCondition(regime='STRONG_TREND'),
        Indicator(name='macd_bullish_cross', value=True),
        Indicator(name='rsi', value=P(lambda x: 45 < x < 70)),
        Indicator(name='volume_surge', value=True),
        salience=90
    )
    def momentum_confirmation_bull(self):
        """Bullish momentum confirmed: MACD cross + healthy RSI + volume"""
        self.add_signal('BUY', 30, 'Bullish momentum: MACD+RSI+Volume')
        self.add_rule_trigger('Momentum Confirmation (Bull)')
    
    # ==================== BEARISH TREND RULES ====================
    
    @Rule(
        MarketCondition(regime='STRONG_TREND'),
        Indicator(name='ema_9_below_21', value=True),
        Indicator(name='ema_21_below_50', value=True),
        Indicator(name='dmn_above_dmp', value=True),
        Indicator(name='supertrend', value='BEARISH'),
        salience=100
    )
    def perfect_downtrend_setup(self):
        """Perfect downtrend: All trend indicators aligned"""
        self.add_signal('SELL', 40, 'Perfect downtrend: ADX+EMA+DMN+Supertrend')
        self.add_rule_trigger('Perfect Downtrend')
    
    @Rule(
        MarketCondition(regime='STRONG_TREND'),
        Indicator(name='macd_bearish_cross', value=True),
        Indicator(name='rsi', value=P(lambda x: 30 < x < 55)),
        Indicator(name='volume_surge', value=True),
        salience=90
    )
    def momentum_confirmation_bear(self):
        """Bearish momentum confirmed: MACD cross + healthy RSI + volume"""
        self.add_signal('SELL', 30, 'Bearish momentum: MACD+RSI+Volume')
        self.add_rule_trigger('Momentum Confirmation (Bear)')
    
    # ==================== MEAN REVERSION RULES ====================
    
    @Rule(
        MarketCondition(regime='RANGING'),
        Indicator(name='rsi', value=P(lambda x: x < 30)),
        Indicator(name='stochrsi', value=P(lambda x: x < 0.2)),
        Indicator(name='bb_position', value=P(lambda x: x < 0.2)),
        Indicator(name='mfi', value=P(lambda x: x < 30)),
        salience=95
    )
    def extreme_oversold(self):
        """Extreme oversold: Multiple oscillators in oversold zone"""
        self.add_signal('BUY', 35, 'Extreme oversold: RSI+StochRSI+BB+MFI')
        self.add_rule_trigger('Extreme Oversold')
    
    @Rule(
        MarketCondition(regime='RANGING'),
        Indicator(name='rsi', value=P(lambda x: x > 70)),
        Indicator(name='stochrsi', value=P(lambda x: x > 0.8)),
        Indicator(name='bb_position', value=P(lambda x: x > 0.8)),
        Indicator(name='mfi', value=P(lambda x: x > 70)),
        salience=95
    )
    def extreme_overbought(self):
        """Extreme overbought: Multiple oscillators in overbought zone"""
        self.add_signal('SELL', 35, 'Extreme overbought: RSI+StochRSI+BB+MFI')
        self.add_rule_trigger('Extreme Overbought')
    
    @Rule(
        MarketCondition(regime='RANGING'),
        Indicator(name='price_deviation_from_ema21', value=P(lambda x: x < -2.0)),
        Indicator(name='willr', value=P(lambda x: x < -80)),
        salience=80
    )
    def mean_reversion_buy(self):
        """Mean reversion buy: Price far below mean + Williams %R oversold"""
        self.add_signal('BUY', 25, 'Mean reversion: Price -2% below EMA21')
        self.add_rule_trigger('Mean Reversion (Buy)')
    
    @Rule(
        MarketCondition(regime='RANGING'),
        Indicator(name='price_deviation_from_ema21', value=P(lambda x: x > 2.0)),
        Indicator(name='willr', value=P(lambda x: x > -20)),
        salience=80
    )
    def mean_reversion_sell(self):
        """Mean reversion sell: Price far above mean + Williams %R overbought"""
        self.add_signal('SELL', 25, 'Mean reversion: Price +2% above EMA21')
        self.add_rule_trigger('Mean Reversion (Sell)')
    
    # ==================== BREAKOUT RULES ====================
    
    @Rule(
        MarketCondition(regime='VOLATILE_TREND'),
        Indicator(name='donchian_breakout', value='UP'),
        Indicator(name='volume_surge', value=True),
        Indicator(name='adx', value=P(lambda x: x > 30)),
        salience=85
    )
    def bullish_breakout(self):
        """Bullish breakout: Donchian upper + volume + strong trend"""
        self.add_signal('BUY', 30, 'Bullish breakout: Donchian+Volume+ADX')
        self.add_rule_trigger('Bullish Breakout')
    
    @Rule(
        MarketCondition(regime='VOLATILE_TREND'),
        Indicator(name='donchian_breakout', value='DOWN'),
        Indicator(name='volume_surge', value=True),
        Indicator(name='adx', value=P(lambda x: x > 30)),
        salience=85
    )
    def bearish_breakout(self):
        """Bearish breakout: Donchian lower + volume + strong trend"""
        self.add_signal('SELL', 30, 'Bearish breakout: Donchian+Volume+ADX')
        self.add_rule_trigger('Bearish Breakout')
    
    @Rule(
        Indicator(name='supertrend_reversal', value='BULL'),
        Indicator(name='rsi', value=P(lambda x: x > 50)),
        salience=75
    )
    def supertrend_bull_reversal(self):
        """Supertrend bullish reversal with RSI confirmation"""
        self.add_signal('BUY', 25, 'Supertrend bullish reversal')
        self.add_rule_trigger('Supertrend Bull Reversal')
    
    @Rule(
        Indicator(name='supertrend_reversal', value='BEAR'),
        Indicator(name='rsi', value=P(lambda x: x < 50)),
        salience=75
    )
    def supertrend_bear_reversal(self):
        """Supertrend bearish reversal with RSI confirmation"""
        self.add_signal('SELL', 25, 'Supertrend bearish reversal')
        self.add_rule_trigger('Supertrend Bear Reversal')
    
    # ==================== VOLUME CONFIRMATION RULES ====================
    
    @Rule(
        Indicator(name='cmf', value=P(lambda x: x > 0.15)),
        Indicator(name='obv_rising', value=True),
        AS.sig << Signal(type='BUY'),
        salience=50
    )
    def volume_confirms_buy(self, sig):
        """Strong buying volume confirms BUY signals"""
        self.add_signal('BUY', 10, 'Volume confirmation: CMF+OBV')
        self.add_rule_trigger('Volume Confirms Buy')
    
    @Rule(
        Indicator(name='cmf', value=P(lambda x: x < -0.15)),
        Indicator(name='obv_falling', value=True),
        AS.sig << Signal(type='SELL'),
        salience=50
    )
    def volume_confirms_sell(self, sig):
        """Strong selling volume confirms SELL signals"""
        self.add_signal('SELL', 10, 'Volume confirmation: CMF+OBV')
        self.add_rule_trigger('Volume Confirms Sell')
    
    # ==================== RISK FILTER RULES ====================
    
    @Rule(
        Indicator(name='rsi', value=P(lambda x: x > 80)),
        AS.sig << Signal(type='BUY'),
        salience=200  # Very high priority (risk filter)
    )
    def filter_extreme_overbought_buy(self, sig):
        """Don't buy when extremely overbought (RSI > 80)"""
        self.retract(sig)
        self.add_rule_trigger('FILTER: Extreme Overbought (blocked BUY)')
    
    @Rule(
        Indicator(name='rsi', value=P(lambda x: x < 20)),
        AS.sig << Signal(type='SELL'),
        salience=200
    )
    def filter_extreme_oversold_sell(self, sig):
        """Don't sell when extremely oversold (RSI < 20)"""
        self.retract(sig)
        self.add_rule_trigger('FILTER: Extreme Oversold (blocked SELL)')
    
    # ==================== FINAL DECISION ====================
    
    def get_final_decision(self) -> Dict:
        """Calculate final signal from all triggered rules"""
        buy_strength = sum(s['strength'] for s in self.signals if s['type'] == 'BUY')
        sell_strength = sum(s['strength'] for s in self.signals if s['type'] == 'SELL')
        
        total_strength = buy_strength + sell_strength
        
        # Determine signal
        if total_strength == 0:
            return {
                'signal': 'HOLD',
                'confidence': 0,
                'reasons': ['No rules triggered']
            }
        
        if buy_strength > sell_strength:
            confidence = min(100, (buy_strength / total_strength) * 100)
            reasons = [s['reason'] for s in self.signals if s['type'] == 'BUY']
            return {
                'signal': 'BUY',
                'confidence': confidence,
                'reasons': reasons,
                'triggered_rules': self.triggered_rules
            }
        elif sell_strength > buy_strength:
            confidence = min(100, (sell_strength / total_strength) * 100)
            reasons = [s['reason'] for s in self.signals if s['type'] == 'SELL']
            return {
                'signal': 'SELL',
                'confidence': confidence,
                'reasons': reasons,
                'triggered_rules': self.triggered_rules
            }
        else:
            # Equal strength = conflict
            return {
                'signal': 'HOLD',
                'confidence': 0,
                'reasons': ['Conflicting signals - equal BUY/SELL strength'],
                'triggered_rules': self.triggered_rules
            }


# ==================== STRATEGY CLASS ====================

class Strategy:
    """
    Main Trading Strategy using Expert System (Experta)
    
    Features:
    - Rule-based decision making with 20+ trading rules
    - Automatic market regime detection
    - Multi-indicator confluence
    - Explainable signals (see which rules triggered)
    - Priority-based rule execution
    """
    
    def __init__(self, config):
        self.config = config
        self.name = "Expert System Strategy (Experta)"
        self.min_confidence = 55  # Minimum confidence to trade
        
    def get_name(self) -> str:
        """Return strategy name for logging"""
        return self.name
        
    def analyze(self, df: pd.DataFrame) -> Dict:
        """
        Analyze market using expert system rules
        
        Args:
            df: DataFrame with OHLCV data and all indicators
            
        Returns:
            Dict with signal, confidence, reasons, and triggered_rules
        """
        if len(df) < 100:
            return {
                'signal': 'HOLD',
                'confidence': 0,
                'reasons': ['Insufficient data'],
                'triggered_rules': []
            }
        
        latest = df.iloc[-1]
        prev = df.iloc[-2]
        
        # Create expert system
        expert = TradingExpert()
        expert.reset()
        
        # ==================== DECLARE FACTS ====================
        
        # ADX and trend strength
        adx = latest.get('adx', 20)
        expert.declare(Indicator(name='adx', value=adx))
        
        # ATR volatility
        atr = latest.get('atr', 0)
        atr_pct = (atr / latest['close']) * 100 if latest['close'] > 0 else 0
        expert.declare(Indicator(name='atr_pct', value=atr_pct))
        
        # EMA alignment
        ema_9 = latest.get('ema_9', latest['close'])
        ema_21 = latest.get('ema_21', latest['close'])
        ema_50 = latest.get('ema_50', latest['close'])
        
        ema_aligned = (ema_9 > ema_21 > ema_50) or (ema_9 < ema_21 < ema_50)
        expert.declare(Indicator(name='ema_aligned', value=ema_aligned))
        expert.declare(Indicator(name='ema_9_above_21', value=ema_9 > ema_21))
        expert.declare(Indicator(name='ema_21_above_50', value=ema_21 > ema_50))
        expert.declare(Indicator(name='ema_9_below_21', value=ema_9 < ema_21))
        expert.declare(Indicator(name='ema_21_below_50', value=ema_21 < ema_50))
        
        # DMP/DMN
        dmp = latest.get('dmp', 0)
        dmn = latest.get('dmn', 0)
        expert.declare(Indicator(name='dmp_above_dmn', value=dmp > dmn))
        expert.declare(Indicator(name='dmn_above_dmp', value=dmn > dmp))
        
        # Supertrend
        st_dir = latest.get('supertrend_direction', 0)
        prev_st_dir = prev.get('supertrend_direction', st_dir)
        supertrend_status = 'BULLISH' if st_dir == 1 else 'BEARISH' if st_dir == -1 else 'NEUTRAL'
        expert.declare(Indicator(name='supertrend', value=supertrend_status))
        
        # Supertrend reversal
        if st_dir == 1 and prev_st_dir == -1:
            expert.declare(Indicator(name='supertrend_reversal', value='BULL'))
        elif st_dir == -1 and prev_st_dir == 1:
            expert.declare(Indicator(name='supertrend_reversal', value='BEAR'))
        
        # MACD
        macd = latest.get('macd', 0)
        macd_signal = latest.get('macd_signal', 0)
        prev_macd = prev.get('macd', macd)
        prev_macd_signal = prev.get('macd_signal', macd_signal)
        
        macd_bullish_cross = macd > macd_signal and prev_macd <= prev_macd_signal
        macd_bearish_cross = macd < macd_signal and prev_macd >= prev_macd_signal
        expert.declare(Indicator(name='macd_bullish_cross', value=macd_bullish_cross))
        expert.declare(Indicator(name='macd_bearish_cross', value=macd_bearish_cross))
        
        # RSI
        rsi = latest.get('rsi', 50)
        expert.declare(Indicator(name='rsi', value=rsi))
        
        # Stochastic RSI
        stochrsi_k = latest.get('stochrsi_k', 0.5)
        expert.declare(Indicator(name='stochrsi', value=stochrsi_k))
        
        # Williams %R
        willr = latest.get('willr', -50)
        expert.declare(Indicator(name='willr', value=willr))
        
        # MFI
        mfi = latest.get('mfi', 50)
        expert.declare(Indicator(name='mfi', value=mfi))
        
        # Bollinger Bands
        bb_upper = latest.get('bb_upper', latest['close'])
        bb_lower = latest.get('bb_lower', latest['close'])
        bb_width = (bb_upper - bb_lower) / latest['close'] if latest['close'] > 0 else 0
        bb_position = (latest['close'] - bb_lower) / (bb_upper - bb_lower) if (bb_upper - bb_lower) > 0 else 0.5
        
        expert.declare(Indicator(name='bb_squeeze', value=bb_width < 0.02))
        expert.declare(Indicator(name='bb_position', value=bb_position))
        
        # Price deviation from EMA21 (percentage)
        price_deviation = ((latest['close'] - ema_21) / ema_21) * 100 if ema_21 > 0 else 0.0
        expert.declare(Indicator(name='price_deviation_from_ema21', value=float(price_deviation)))
        
        # Donchian breakout
        dc_upper = latest.get('dc_upper', latest['close'])
        dc_lower = latest.get('dc_lower', latest['close'])
        
        if latest['close'] >= dc_upper:
            expert.declare(Indicator(name='donchian_breakout', value='UP'))
        elif latest['close'] <= dc_lower:
            expert.declare(Indicator(name='donchian_breakout', value='DOWN'))
        
        # Volume
        volume = latest.get('volume', 0)
        volume_sma = latest.get('volume_sma', volume)
        volume_surge = volume > volume_sma * 1.5 if volume_sma > 0 else False
        expert.declare(Indicator(name='volume_surge', value=volume_surge))
        
        # CMF
        cmf = latest.get('cmf', 0)
        expert.declare(Indicator(name='cmf', value=cmf))
        
        # OBV trend
        obv = df['obv'].tail(5) if 'obv' in df.columns else pd.Series([0])
        obv_rising = obv.iloc[-1] > obv.iloc[0] if len(obv) > 1 else False
        obv_falling = obv.iloc[-1] < obv.iloc[0] if len(obv) > 1 else False
        expert.declare(Indicator(name='obv_rising', value=obv_rising))
        expert.declare(Indicator(name='obv_falling', value=obv_falling))
        
        # Create initial signal facts (for volume confirmation rules)
        # These will be created by other rules, but we need placeholders for pattern matching
        
        # ==================== RUN EXPERT SYSTEM ====================
        
        expert.run()
        
        # Get final decision
        decision = expert.get_final_decision()
        
        # Add triggered rules info to reasons
        if expert.triggered_rules:
            decision['reasons'].insert(0, f"Rules: {len(expert.triggered_rules)} triggered")
        
        # Apply minimum confidence threshold
        if decision['confidence'] < self.min_confidence:
            return {
                'signal': 'HOLD',
                'confidence': decision['confidence'],
                'reasons': decision['reasons'] + [f'Below threshold ({self.min_confidence}%)'],
                'triggered_rules': expert.triggered_rules
            }
        
        return {
            'signal': decision['signal'],
            'confidence': round(decision['confidence'], 1),
            'reasons': decision['reasons'][:5],  # Top 5 reasons
            'triggered_rules': expert.triggered_rules
        }

